//
// :apps
//

subprojects {
    apply plugin: 'com.android.application'

    android {
        buildToolsVersion rootProject.ext.buildToolsVersion

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
    }

    /*
     * Create a project dependency for assembleDebug and assembleRelease tasks with sub projects.
     * The project doesn't know about assembleDebug and assembleRelease tasks, this is a workaround
     * until Build beacon supports custom gradle tasks.
     */
    tasks.all {
        if (it.name == 'assembleDebug') {
            parent.assembleDebug.dependsOn it
        } else if (it.name == 'assembleRelease') {
            parent.assembleRelease.dependsOn it
        }
    }
}

// Task to copy an APK from sub projects to current project.
def copyApkToProjectBuildTask(variantName) {
    subprojects.android.applicationVariants.each { applicationVariant ->
        applicationVariant.each { variant ->

            // Copy only one APK to current project
            if (variant.name.contains(variantName) && variant.name.contains('projectDependency') && variant.name.contains('Vanilla')) {
                variant.outputs.outputFile.each { File file ->
                    copy {
                        from "${file.absolutePath}"
                        into "${buildDir}/outputs/apk/"
                    }
                }
            }
        }
    }
}

task assembleDebug() {
    doLast {
        copyApkToProjectBuildTask('Debug')
    }
}

task assembleRelease() {
    doLast {
        copyApkToProjectBuildTask('Release')
    }
}

// Empty task with task dependencies.
task assemble(dependsOn: [assembleDebug, assembleRelease]) {}